import $7V4JZ$babelruntimehelpersesmextends from "@babel/runtime/helpers/esm/extends";
import {forwardRef as $7V4JZ$forwardRef, useRef as $7V4JZ$useRef, useEffect as $7V4JZ$useEffect, createElement as $7V4JZ$createElement} from "react";
import {createContext as $7V4JZ$createContext} from "@radix-ui/react-context";
import {useComposedRefs as $7V4JZ$useComposedRefs} from "@radix-ui/react-compose-refs";
import {Primitive as $7V4JZ$Primitive} from "@radix-ui/react-primitive";
import {useId as $7V4JZ$useId} from "@radix-ui/react-id";







/* -------------------------------------------------------------------------------------------------
 * Label
 * -----------------------------------------------------------------------------------------------*/ const $b73a6c6685e72184$var$NAME = 'Label';
const [$b73a6c6685e72184$var$LabelProvider, $b73a6c6685e72184$var$useLabelContextImpl] = $7V4JZ$createContext($b73a6c6685e72184$var$NAME, {
    id: undefined,
    controlRef: {
        current: null
    }
});
const $b73a6c6685e72184$export$b04be29aa201d4f5 = /*#__PURE__*/ $7V4JZ$forwardRef((props, forwardedRef)=>{
    const { htmlFor: htmlFor , id: idProp , ...labelProps } = props;
    const controlRef = $7V4JZ$useRef(null);
    const ref = $7V4JZ$useRef(null);
    const composedRefs = $7V4JZ$useComposedRefs(forwardedRef, ref);
    const id = $7V4JZ$useId(idProp);
    $7V4JZ$useEffect(()=>{
        if (htmlFor) {
            const element = document.getElementById(htmlFor);
            const label = ref.current;
            if (label && element) {
                const getAriaLabel = ()=>element.getAttribute('aria-labelledby')
                ;
                const ariaLabelledBy1 = [
                    id,
                    getAriaLabel()
                ].filter(Boolean).join(' ');
                element.setAttribute('aria-labelledby', ariaLabelledBy1);
                controlRef.current = element;
                return ()=>{
                    var _getAriaLabel;
                    /**
           * We get the latest attribute value because at the time that this cleanup fires,
           * the values from the closure may have changed.
           */ const ariaLabelledBy = (_getAriaLabel = getAriaLabel()) === null || _getAriaLabel === void 0 ? void 0 : _getAriaLabel.replace(id, '');
                    if (ariaLabelledBy === '') element.removeAttribute('aria-labelledby');
                    else if (ariaLabelledBy) element.setAttribute('aria-labelledby', ariaLabelledBy);
                };
            }
        }
    }, [
        id,
        htmlFor
    ]);
    return /*#__PURE__*/ $7V4JZ$createElement($b73a6c6685e72184$var$LabelProvider, {
        id: id,
        controlRef: controlRef
    }, /*#__PURE__*/ $7V4JZ$createElement($7V4JZ$Primitive.span, $7V4JZ$babelruntimehelpersesmextends({
        role: "label",
        id: id
    }, labelProps, {
        ref: composedRefs,
        onMouseDown: (event)=>{
            var _props$onMouseDown;
            (_props$onMouseDown = props.onMouseDown) === null || _props$onMouseDown === void 0 || _props$onMouseDown.call(props, event); // prevent text selection when double clicking label
            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
        },
        onClick: (event)=>{
            var _props$onClick;
            (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
            if (!controlRef.current || event.defaultPrevented) return;
            const isClickingControl = controlRef.current.contains(event.target); // Ensure event was generated by a user action
            // https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted
            const isUserClick = event.isTrusted === true;
            /**
       * When a label is wrapped around the control it labels, we trigger the appropriate events
       * on the control when the label is clicked. We do nothing if the user is already clicking the
       * control inside the label.
       */ if (!isClickingControl && isUserClick) {
                controlRef.current.click();
                controlRef.current.focus();
            }
        }
    })));
});
/*#__PURE__*/ Object.assign($b73a6c6685e72184$export$b04be29aa201d4f5, {
    displayName: $b73a6c6685e72184$var$NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $b73a6c6685e72184$export$feddbbf47baabdb9 = (element)=>{
    const context = $b73a6c6685e72184$var$useLabelContextImpl('LabelConsumer');
    const { controlRef: controlRef  } = context;
    $7V4JZ$useEffect(()=>{
        if (element) controlRef.current = element;
    }, [
        element,
        controlRef
    ]);
    return context.id;
};
const $b73a6c6685e72184$export$be92b6f5f03c0fe9 = $b73a6c6685e72184$export$b04be29aa201d4f5;




export {$b73a6c6685e72184$export$b04be29aa201d4f5 as Label, $b73a6c6685e72184$export$be92b6f5f03c0fe9 as Root, $b73a6c6685e72184$export$feddbbf47baabdb9 as useLabelContext};
//# sourceMappingURL=index.module.js.map

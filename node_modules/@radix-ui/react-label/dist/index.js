var $RyX6d$babelruntimehelpersextends = require("@babel/runtime/helpers/extends");
var $RyX6d$react = require("react");
var $RyX6d$radixuireactcontext = require("@radix-ui/react-context");
var $RyX6d$radixuireactcomposerefs = require("@radix-ui/react-compose-refs");
var $RyX6d$radixuireactprimitive = require("@radix-ui/react-primitive");
var $RyX6d$radixuireactid = require("@radix-ui/react-id");

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "Label", () => $2583d9c3eccdd4e2$export$b04be29aa201d4f5);
$parcel$export(module.exports, "Root", () => $2583d9c3eccdd4e2$export$be92b6f5f03c0fe9);
$parcel$export(module.exports, "useLabelContext", () => $2583d9c3eccdd4e2$export$feddbbf47baabdb9);






/* -------------------------------------------------------------------------------------------------
 * Label
 * -----------------------------------------------------------------------------------------------*/ const $2583d9c3eccdd4e2$var$NAME = 'Label';
const [$2583d9c3eccdd4e2$var$LabelProvider, $2583d9c3eccdd4e2$var$useLabelContextImpl] = $RyX6d$radixuireactcontext.createContext($2583d9c3eccdd4e2$var$NAME, {
    id: undefined,
    controlRef: {
        current: null
    }
});
const $2583d9c3eccdd4e2$export$b04be29aa201d4f5 = /*#__PURE__*/ $RyX6d$react.forwardRef((props, forwardedRef)=>{
    const { htmlFor: htmlFor , id: idProp , ...labelProps } = props;
    const controlRef = $RyX6d$react.useRef(null);
    const ref = $RyX6d$react.useRef(null);
    const composedRefs = $RyX6d$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);
    const id = $RyX6d$radixuireactid.useId(idProp);
    $RyX6d$react.useEffect(()=>{
        if (htmlFor) {
            const element = document.getElementById(htmlFor);
            const label = ref.current;
            if (label && element) {
                const getAriaLabel = ()=>element.getAttribute('aria-labelledby')
                ;
                const ariaLabelledBy1 = [
                    id,
                    getAriaLabel()
                ].filter(Boolean).join(' ');
                element.setAttribute('aria-labelledby', ariaLabelledBy1);
                controlRef.current = element;
                return ()=>{
                    var _getAriaLabel;
                    /**
           * We get the latest attribute value because at the time that this cleanup fires,
           * the values from the closure may have changed.
           */ const ariaLabelledBy = (_getAriaLabel = getAriaLabel()) === null || _getAriaLabel === void 0 ? void 0 : _getAriaLabel.replace(id, '');
                    if (ariaLabelledBy === '') element.removeAttribute('aria-labelledby');
                    else if (ariaLabelledBy) element.setAttribute('aria-labelledby', ariaLabelledBy);
                };
            }
        }
    }, [
        id,
        htmlFor
    ]);
    return /*#__PURE__*/ $RyX6d$react.createElement($2583d9c3eccdd4e2$var$LabelProvider, {
        id: id,
        controlRef: controlRef
    }, /*#__PURE__*/ $RyX6d$react.createElement($RyX6d$radixuireactprimitive.Primitive.span, ($parcel$interopDefault($RyX6d$babelruntimehelpersextends))({
        role: "label",
        id: id
    }, labelProps, {
        ref: composedRefs,
        onMouseDown: (event)=>{
            var _props$onMouseDown;
            (_props$onMouseDown = props.onMouseDown) === null || _props$onMouseDown === void 0 || _props$onMouseDown.call(props, event); // prevent text selection when double clicking label
            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
        },
        onClick: (event)=>{
            var _props$onClick;
            (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
            if (!controlRef.current || event.defaultPrevented) return;
            const isClickingControl = controlRef.current.contains(event.target); // Ensure event was generated by a user action
            // https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted
            const isUserClick = event.isTrusted === true;
            /**
       * When a label is wrapped around the control it labels, we trigger the appropriate events
       * on the control when the label is clicked. We do nothing if the user is already clicking the
       * control inside the label.
       */ if (!isClickingControl && isUserClick) {
                controlRef.current.click();
                controlRef.current.focus();
            }
        }
    })));
});
/*#__PURE__*/ Object.assign($2583d9c3eccdd4e2$export$b04be29aa201d4f5, {
    displayName: $2583d9c3eccdd4e2$var$NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $2583d9c3eccdd4e2$export$feddbbf47baabdb9 = (element)=>{
    const context = $2583d9c3eccdd4e2$var$useLabelContextImpl('LabelConsumer');
    const { controlRef: controlRef  } = context;
    $RyX6d$react.useEffect(()=>{
        if (element) controlRef.current = element;
    }, [
        element,
        controlRef
    ]);
    return context.id;
};
const $2583d9c3eccdd4e2$export$be92b6f5f03c0fe9 = $2583d9c3eccdd4e2$export$b04be29aa201d4f5;




//# sourceMappingURL=index.js.map
